#pragma once

#include <string>
#include <vector>

#include "OutputResult.h"
class TradingSignals
{
public:
   /**
    * Constructor, sets size of values in slow and fast moving average.
    *
    * \param nSMaSize: values in slow moving average
    * \param nFMaSize: values in fast moving average
    */
   TradingSignals(int nSMaSize, int nFMaSize);

   /**
    * Parse input file generated by the python script.
    *
    * \param strPath: path to input file
    * \return a vector containing the file's parsed data
    */
   std::vector<tOutputResult> parseFile(std::string strPath);

   /**
    * defines rules on how to parse each individual line. Called by parseFile. Public for unit tests.
    *
    * \param strLine: string containing the line to parse. Line should contain the timestamp (HH:MM:SS.ms) and stock price separated by a comma
    * \return pair containing the parsed timestamp and stock price
    */
   std::pair<std::tm, float> parseLine(std::string& strLine);

private:
   /**
    * Generate signal based on input the values of moving averages.
    *
    * \param fFastMa: fast moving average
    * \param fSlowMa: slow moving average
    * \return signal: BUY, SELL, NONE (do nothing)
    */
   tOutputResult::tSignal generateSignal(float fFastMa, float fSlowMa);
   /**
    * Set values after parsing all data in a given minute. Called by checkValues.
    *
    * \param pairTimePointValue: pair containing the parsed timestamp and stock price in a single line
    * \param sCurrentResult: struct containing the result if each individual minute
    * \param tmCurrentTime: variable to store time info, saves till minute
    * \param fLowest: lowest stock price within a given minute
    * \param fHighest: highest stock price within a given minute
    * \param fClose: closing stock price, at the end of the minute
    * \param isOpen: bool checking if a stock just opened
    */
   void setValues(
      std::pair<std::tm, float>& pairTimePointValue,
      tOutputResult& sCurrentResult,
      std::tm& tmCurrentTime,
      float& fLowest,
      float& fHighest,
      float& fClose,
      bool& isOpen
   );

   /**
    * Check if any of the below values need to be updated, store in sCurrentResult if the minute changes. Called by parseFile after each line is parsed.
    *
    * \param pairTimePointValue: pair containing the parsed timestamp and stock price in a single line
    * \param sCurrentResult: struct containing the result if each individual minute
    * \param tmCurrentTime: variable to store time info, saves till minute
    * \param fLowest: lowest stock price within a given minute
    * \param fHighest: highest stock price within a given minute
    * \param fClose: closing stock price, at the end of the minute
    * \param isOpen: bool checking if a stock just opened
    * \param bLastLine: check ti see if the line is last line in the input file
    */
   void checkValues(
      std::pair<std::tm, float>& pairTimePointValue,
      tOutputResult& sCurrentResult,
      std::tm& tmCurrentTime,
      float& fLowest,
      float& fHighest,
      float& fClose,
      bool& isOpen,
      bool bLastLine = false
   );

   /**
    * Generates moving average for a set of values.
    *
    * \param fValue: individual value, stored in a vector
    * \param nSize: size of moving average to generate
    * \return the moving average
    */
   float generateMovingAverage(float fValue, size_t nSize);

   /**
    * Prints an error in case of bad path.
    *
    */
   void printError();

   std::vector<tOutputResult> vecOutputResult;  ///< Output result is stored in this vector, returned to app after parsing file
   const size_t nSlowMaSize;                    ///< Size of elements in slow moving average
   const size_t nFastMaSize;                    ///< Size of elements in fast moving average
   float fPrevDiff;                             ///< Stores the difference between fast and slow moving average the last time generateSignal was called

};

